/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mqttclientapp_screen/mqttClientAppViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

mqttClientAppViewBase::mqttClientAppViewBase() :
    buttonCallback(this, &mqttClientAppViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &mqttClientAppViewBase::flexButtonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    bkg.setPosition(0, 0, 800, 480);
    bkg.setColor(touchgfx::Color::getColorFrom24BitRGB(191, 191, 191));
    bkg.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    bkg.setBorderSize(5);

    backBtn.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_48_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_48_ID));
    backBtn.setIconXY(10, 2);
    backBtn.setPosition(6, 6, 50, 50);
    backBtn.setAction(flexButtonCallback);

    brokerLabel.setXY(10, 58);
    brokerLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    brokerLabel.setLinespacing(0);
    brokerLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));

    brokerContainer.setXY(10, 83);

    userLabel.setXY(10, 175);
    userLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    userLabel.setLinespacing(0);
    userLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));

    userContainer.setXY(10, 200);

    passwordLabel.setXY(10, 250);
    passwordLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    passwordLabel.setLinespacing(0);
    passwordLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));

    passwordContainer.setXY(10, 275);

    topicLabel.setXY(10, 325);
    topicLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    topicLabel.setLinespacing(0);
    topicLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));

    topicContainer.setXY(10, 350);

    subscribeTopicBtn.setXY(155, 345);
    subscribeTopicBtn.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
    subscribeTopicBtn.setIconXY(16, 16);
    subscribeTopicBtn.setAction(buttonCallback);

    unsubscribeTopicBtn.setXY(225, 345);
    unsubscribeTopicBtn.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID));
    unsubscribeTopicBtn.setIconXY(16, 16);
    unsubscribeTopicBtn.setAction(buttonCallback);

    connectBtn.setXY(62, 410);
    connectBtn.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    connectBtn.setLabelText(touchgfx::TypedText(T_SINGLEUSEID20));
    connectBtn.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    connectBtn.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    connectBtn.setAction(buttonCallback);

    messageBkg.setPosition(291, 58, 498, 412);
    messageBkg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    messageBkg.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    messageBkg.setBorderSize(5);

    messageContainer.setPosition(296, 63, 488, 402);
    messageContainer.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    mqttData.setXY(5, 5);
    mqttData.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    mqttData.setLinespacing(0);
    mqttDataBuffer[0] = 0;
    mqttData.setWildcard(mqttDataBuffer);
    mqttData.resizeToCurrentText();
    mqttData.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));
    messageContainer.add(mqttData);
    messageContainer.setScrollbarsPermanentlyVisible();

    connectProgress.setXY(231, 4);
    connectProgress.setProgressIndicatorPosition(0, 0, 54, 54);
    connectProgress.setRange(0, 100);
    connectProgress.setCenter(27, 27);
    connectProgress.setRadius(20);
    connectProgress.setLineWidth(10);
    connectProgress.setStartEndAngle(0, 360);
    connectProgress.setCapPrecision(180);
    connectProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_CIRCLE_INDICATOR_BG_LINE_FULL_ID));
    connectProgressPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 152, 252));
    connectProgress.setPainter(connectProgressPainter);
    connectProgress.setValue(60);

    statusLabel.setXY(85, 19);
    statusLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    statusLabel.setLinespacing(0);
    statusLabelBuffer[0] = 0;
    statusLabel.setWildcard(statusLabelBuffer);
    statusLabel.resizeToCurrentText();
    statusLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));

    PortLabel.setXY(104, 156);
    PortLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    PortLabel.setLinespacing(0);
    PortLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));

    portContainer.setXY(155, 143);

    clientIDLabel.setXY(308, 19);
    clientIDLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    clientIDLabel.setLinespacing(0);
    clientIDLabelBuffer[0] = 0;
    clientIDLabel.setWildcard(clientIDLabelBuffer);
    clientIDLabel.resizeToCurrentText();
    clientIDLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID25));

    add(__background);
    add(bkg);
    add(backBtn);
    add(brokerLabel);
    add(brokerContainer);
    add(userLabel);
    add(userContainer);
    add(passwordLabel);
    add(passwordContainer);
    add(topicLabel);
    add(topicContainer);
    add(subscribeTopicBtn);
    add(unsubscribeTopicBtn);
    add(connectBtn);
    add(messageBkg);
    add(messageContainer);
    add(connectProgress);
    add(statusLabel);
    add(PortLabel);
    add(portContainer);
    add(clientIDLabel);
}

void mqttClientAppViewBase::setupScreen()
{
    brokerContainer.initialize();
    userContainer.initialize();
    passwordContainer.initialize();
    topicContainer.initialize();
    portContainer.initialize();
}

void mqttClientAppViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &subscribeTopicBtn)
    {
        //subscribeTopic
        //When subscribeTopicBtn clicked call virtual function
        //Call subscribeTopic
        subscribeTopic();
    }
    else if (&src == &unsubscribeTopicBtn)
    {
        //unsubscribeTopic
        //When unsubscribeTopicBtn clicked call virtual function
        //Call unsubscribeTopic
        unsubscribeTopic();
    }
    else if (&src == &connectBtn)
    {
        //mqttConnect
        //When connectBtn clicked call virtual function
        //Call mqttConnectToBroker
        mqttConnectToBroker();
    }
}

void mqttClientAppViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backBtn)
    {
        //backToHome
        //When backBtn clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
