/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MQTTCLIENTAPPVIEWBASE_HPP
#define MQTTCLIENTAPPVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mqttclientapp_screen/mqttClientAppPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <gui/containers/longEditContainer.hpp>
#include <gui/containers/shortEditContainer.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>

class mqttClientAppViewBase : public touchgfx::View<mqttClientAppPresenter>
{
public:
    mqttClientAppViewBase();
    virtual ~mqttClientAppViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void mqttConnectToBroker()
    {
        // Override and implement this function in mqttClientApp
    }

    virtual void subscribeTopic()
    {
        // Override and implement this function in mqttClientApp
    }

    virtual void unsubscribeTopic()
    {
        // Override and implement this function in mqttClientApp
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::BoxWithBorder bkg;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > backBtn;
    touchgfx::TextArea brokerLabel;
    longEditContainer brokerContainer;
    touchgfx::TextArea userLabel;
    longEditContainer userContainer;
    touchgfx::TextArea passwordLabel;
    longEditContainer passwordContainer;
    touchgfx::TextArea topicLabel;
    shortEditContainer topicContainer;
    touchgfx::ButtonWithIcon subscribeTopicBtn;
    touchgfx::ButtonWithIcon unsubscribeTopicBtn;
    touchgfx::ButtonWithLabel connectBtn;
    touchgfx::BoxWithBorder messageBkg;
    touchgfx::ScrollableContainer messageContainer;
    touchgfx::TextAreaWithOneWildcard mqttData;
    touchgfx::CircleProgress connectProgress;
    touchgfx::PainterRGB888 connectProgressPainter;
    touchgfx::TextAreaWithOneWildcard statusLabel;
    touchgfx::TextArea PortLabel;
    shortEditContainer portContainer;
    touchgfx::TextAreaWithOneWildcard clientIDLabel;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MQTTDATA_SIZE = 4096;
    touchgfx::Unicode::UnicodeChar mqttDataBuffer[MQTTDATA_SIZE];
    static const uint16_t STATUSLABEL_SIZE = 20;
    touchgfx::Unicode::UnicodeChar statusLabelBuffer[STATUSLABEL_SIZE];
    static const uint16_t CLIENTIDLABEL_SIZE = 128;
    touchgfx::Unicode::UnicodeChar clientIDLabelBuffer[CLIENTIDLABEL_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<mqttClientAppViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<mqttClientAppViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MQTTCLIENTAPPVIEWBASE_HPP
